right now: 78/71

	- paranamer support
	- caelumweb2: trocar senha support
	- ParanamerParameterNameProvider test
	- Validator test
	- ViewsProperties test
	- VRaptor2MethodLookup test
	
	- caelumweb2: logout
	- cw2: telefones
	- path annotation with support to regex (niceurls?)

	- Array, Collection
	Set support
	Map support

	- caelumweb2 finalizar tarefa
	- cw2: statements







	- caelumweb use method FILL to app scope and request scope: adds to a list and adds on the run
	- resolve interceptororder with interceptorstack
	
- better than vraptor2: support for inheritance
- better exception handling everywhere (prior)
- converters: File
- path annotation with support to value injection (niceurls?)
- path annotation with support to dynamic logic and component lookup (niceurls?)
- result interface as wished
	- MAKE CACHE WORKS
- MAKE CONVERTERS GLOBAL, NOT LOCAL?
- pico problem: STARTABLE/STOPABLE COMPONENTS with annotation + tests
- verify org.apache.log4j logs -> sl4j
- json output support
- xml output support
	
site docs (prior to release)
- migration tutorial
- doc how to change the PathResolver algorithm
- doc how to use PageResult directly
- doc how to configure log
- faq xxx doesnt work: activate log
- note on converter lookup (injection system)... note that it might change???
- component are annotated by @Stereotyped annotations: right now: Resource and vraptor2 component
- better than vraptor2:
	- method parameters: list of custom type supported
	- enum converter: private enums (usually only locally used) supported
- migration
	- Provider config
	- plugins not supported
	- converters without access to LogicRequest automatically supported through vraptor.xml
- calendar support: either birthday or birthday.time
- BigDecimal, BigInteger converter

vraptor 2 support

- v2: @Logic (parameters=...) support
- method invocation w parameters
- v2: converters with access to request/session/context
- v2: custom converters used on annotated fields
- default Logic,Action and so on key removal
- json output
- xml output

kung help

- interceptor registration real support
- paranamer support
- support Validator
- full spring support
- concatenate convertion and validation errors






right before release
	copyright in all files check
	vraptor2 release with customized code
		the org.vraptor.Component annotation was modified










- ContainerBasedNullHandler support (non cached instances)
- 404 component (so its customizable)
- customizable error process on request execution
- hibernate validation plugin
- hibernate plugin
- custom converters for specified method parameters
- setting errors during ognl expression evaluation should be defined as validation errors
- default dir scanner misses unit tests






















ONLY AFTER RELEASE
- MIRROR usage as a fallback for OGNL instantiation
- MIRROR usage everywhere
- reflection fallback system on nullhandler (automatic?)
- CachedConverters and others should neve register(Class), they should do it at startup and clone those pico instances if faster... check it!
- all converter erros messages should contain the original value between '' so its clear in the message if it was empty (or null)
- test that checks that the main PicoContainer is not registered... and the converters interface is also not registered so it doesnt give the same converter to two different requests
- check all TODOS and do something about them
- allow private/protected constructors (search for every newInstance with getConstructor and setAccessible them, work it out with pico/mirror and so on)
- allow private/protected getters/setters
- method addAsNext on InterceptorStack could have another name, could have been another interface (same implmementation)?
- converters: jodatime
- accept do base interceptors are not being invoked
- time converters
- guice support
- SortedSet, Queue, SortedMap support
- BigInteger converter
- generic interface support: instantiates the implementation
- vraptor2 components with support for inherited outjection/injection
- vraptor2 logic with 2 names support
- niceurl extra features
- Logger.isDebugEnabled

	optimizations (product):
	- converter optimization
	- connection leak
	- static file lookup cache
	- filter optimization
	- transaction/ddc optimization
	- lookup for other common mistakes
	- deploy mode: complain about unused args/ignore unused args
	- support
	- extra vraptor2 compatibility procedures:
		- interceptor with restricted functionalities
		- plugins with restricted functionalities
		- custom lib
	- vraptor2 code analysis product
	- instantiate asm class only once
	- @In, @Out, @Read, @Parameter, @Logic(full support), @Component(full support)
	- dir lookup run only once (faster startup)
	- mistakes check removal: i.e. outjectioninterceptor ifs, assuming that the client code is just fine
	- log visualization tool
	- log per user on log file (so you can keep track of who did what and debug an specific user)
	- v2: getters for value injection if vraptor2 component, using vraptor2 crazy introspectors, otherwise vraptor3
	- v2 paranamer support if vraptor2 component
	- validate invalid parameter names in vraptor2 (duplicated names)
	- validate invalid parameter names in vraptor3 (duplicated names)
	- empty lists should be cached and early returned
	- cache EMPTY parameter class for method without parameters
	- parameter name provider needs cache? maybe


done:
- support @Path
- ant build run tests
- cobertura report
- spring support
- invoke method
- support @Post, @...
- support Result with include
- vraptor info component
- 70% coverage
- support Result with custom views
- customizable strategies for JspView name (PathResolver)
- default strategy: resourceclass + resourcemethod
- sl4j usage
- interceptor support
- type converters
- ognl support
- vraptor2: @Component lookup
- primitive converters
- enum converter
- vraptor2: public method lookup (old algo)
- vraptor2: converter without request/session/context access support
	- v2: view interceptor
	- vraptor2 path resolver
	- vraptor2 component instantiation
	- vraptor2 interceptor instantiation
	- vraptor2 regex view manager support
	- vraptor2: pathresolver support on vraptor.xml based info
	- v2: support to validate method (improved: complain about method with wrong number of args)
	- v2: support for views.properties
	- method invocation without parameters
	- custom vraptor2 converters through custom Converters implementation
	- v2: instantiate with injection
	- better clarifying messages on common mistakes (i.e. logic getter which receives a parameter)
	- v2: getters for outjection
- converters
	primitive
	wrappers
	calendar
	date
	bigdecimal
	