right now:

- method parameter support with ognl
- use asm instead of javassist to instantiate types

- either instantiate objects with Container or Mirrors using ognl
- paranamer support
- sl4j usage
- support Validator

- pico container allows interceptor registration
- pico container common component registration

- como customizar a saida de um UNICO metodo para qq coisa (jsp ou nao)
- customizar a saida de um metodo para outro componente/metodo
- interceptor support
- DefaultResourceAndMethodLookup  esta usando @Post?
- JspView is actually a forward/redirect guy... nothing to do with jsp
- easier way to forward (result.forward?): Result --> JspResult (implements Result, wrapping DefaultResult, and "extending" JspView)... by default register 10 of then
- concatenae convertion and validation errors
- improve code within ognlparametersprovider and test it
- ognlparametersprovider should create a class only during first request to that method
- fully test ognlparametersprovider
- report javassist bug: public Object[] gimmeMyValues() { return new Object[]{};}

later (prior to release)

- use mirrors where there is reflection 
- support @Path with nice urls
- CachedResourceRegistry caches with a map of (talvez o cache deva ser Map<MethodName, ResourceMethod>)

site docs (prior to release)
- doc how to change the PathResolver algorithm
- doc how to use PageResult directly

kung help

- full spring support

later customization (after first release)

- vraptor acceptance tests (sem integracao com servidor)
- vraptor2 component support
- vraptor2 interceptor support
- vraptor2 plugin support?
- 404 component (so its customizable)
- customizable requestexecution
- customizable error process on request execution
- hibernate validation plugin
- guice support
- hibernate plugin

done:
- support @Path
- ant build run tests
- cobertura report
- spring support
- invoke method
- support @Post, @...
- support Result with include
- vraptor info component
- 70% coverage
- support Result with custom views
- customizable strategies for JspView name (PathResolver)
- default strategy: resourceclass + resourcemethod
