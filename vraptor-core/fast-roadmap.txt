right now:

	- caelumweb2 tarefa working

	- caelumweb2 statement and telefones working
	- better than vraptor2: support for inheritance





	- caelumweb use method FILL to app scope and request scope: adds to a list and adds on the run
	- resolve interceptororder with interceptorstack
	
- better exception handling everywhere (prior)
- converters: File
- result interface as wished
- static file redirect: extract to a testable component
- path annotation with support to nice urls
	- MAKE CACHE WORKS
- MAKE CONVERTERS GLOBAL, NOT LOCAL?

site docs (prior to release)
- migration tutorial
- doc how to change the PathResolver algorithm
- doc how to use PageResult directly
- doc how to configure log
- faq xxx doesnt work: activate log
- note on converter lookup (injection system)... note that it might change???
- component are annotated by @Stereotyped annotations: right now: Resource and vraptor2 component
- better than vraptor2:
	- method parameters: list of custom type supported
	- enum converter: private enums (usually only locally used) supported
- migration
	- Provider config
	- plugins not supported
	- converters without access to LogicRequest automatically supported through vraptor.xml
- calendar support: either birthday or birthday.time
- BigDecimal, BigInteger converter


	pico problem:
	- STARTABLE/STOPABLE COMPONENTS with annotation + tests
	
	optimizations (product):
	- converter optimization
	- connection leak
	- static file lookup cache
	- filter optimization
	- transaction/ddc optimization
	- lookup for other common mistakes
	- deploy mode: complain about unused args/ignore unused args
	- support
	- extra vraptor2 compatibility procedures:
		- interceptor with restricted functionalities
		- plugins with restricted functionalities
		- custom lib
	- vraptor2 code analysis product
	- instantiate asm class only once


vraptor 2 support

- v2: setters/getters for value injection
- method invocation without parameters
- method invocation w parameters
- custom vraptor2 converters through custom Converters implementation
- v2: instantiate with injection
- v2: converters with access to request/session/context
- v2: custom converters used on annotated fields
- vraptor2: pathresolver support on vraptor.xml based info
- v2: support to validate method (improved: complain about method with wrong number of args)
- v2: support for views.properties

kung help

- interceptor registration real support
- paranamer support
- support Validator
- full spring support
- concatenate convertion and validation errors
- better package for typecreators







right before release
	copyright in all files check
	vraptor2 release with customized code
		the org.vraptor.Component annotation was modified










later customization (after first release)

- lookup de dir da para fazer uma vez so para tudo com varios acceptors
- ContainerBasedNullHandler support (non cached instances)
- vraptor2 plugin support?
- 404 component (so its customizable)
- customizable requestexecution
- customizable error process on request execution
- hibernate validation plugin
- guice support
- hibernate plugin
- Array, Set, Collection, SortedSet, Queue, Map, SortedMap support
- generic interface support
- custom converters for specified method parameters
- setting errors during ognl expression evaluation should be defined as validation errors
- allow registering of global converters
- allows registering of specific converters (model or method based)

- default dir scanner misses unit tests

ONLY AFTER RELEASE
- MIRROR usage as a fallback for OGNL instantiation
- MIRROR usage everywhere
- reflection fallback system on nullhandler (automatic?)
- CachedConverters and others should neve register(Class), they should do it at startup and clone those pico instances if faster... check it!
- all converter erros messages should contain the original value between '' so its clear in the message if it was empty (or null)
- test that checks that the main PicoContainer is not registered... and the converters interface is also not registered so it doesnt give the same converter to two different requests
- check all TODOS and do something about them
- allow private/protected constructors (search for every newInstance with getConstructor and setAccessible them, work it out with pico/mirror and so on)
- allow private/protected getters/setters
- method addAsNext on InterceptorStack could have another name, could have been another interface (same implmementation)?
- converters: jodatime
- accept do base interceptors are not being invoked
- time converters




done:
- support @Path
- ant build run tests
- cobertura report
- spring support
- invoke method
- support @Post, @...
- support Result with include
- vraptor info component
- 70% coverage
- support Result with custom views
- customizable strategies for JspView name (PathResolver)
- default strategy: resourceclass + resourcemethod
- sl4j usage
- interceptor support
- type converters
- ognl support
- vraptor2: @Component lookup
- primitive converters
- enum converter
- vraptor2: public method lookup (old algo)
- vraptor2: converter without request/session/context access support
	- v2: view interceptor
	- vraptor2 path resolver
	- vraptor2 component instantiation
	- vraptor2 interceptor instantiation
	- vraptor2 regex view manager support
- converters
	primitive
	wrappers
	calendar
	date
	bigdecimal
	