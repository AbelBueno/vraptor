com a galera:
- cweb: remova all RequiresTRansaction
- cweb: disponibilidade on ADD PESSOA how works?
- cweb all tests
- cweb tem que rodar teste antes de comecar tudo... bizarro




- check test multipart interceptor
- support for FORWARD + REDIRECT 
- result support (new style, logic or string)
- new view properties



(MUST) - setting errors during ognl expression evaluation should be defined as validation errors
- PicoContainer only register if it needs
	(MUST) - support HibernateValidator with i18n messages
	(MUST) - support i18n messages
	(MUST) - pico problem: STARTABLE/STOPABLE COMPONENTS with annotation + tests
	(MUST) - niceurls with programmatic support
	(MUST) - niceurls -> path support
	(MUST) - niceurls with file config support -> path support
	(MUST) - path annotation with support to value injection (niceurls?)
	(MUST) - hibernate plugin
	(MUST) - json output support
	(MUST) - better exception handling everywhere
	- unit test for PicoContainersProvider... every scope should be tested
OgnlParametersProviderTest:
    @Test
    public void canHandleListOfWrapperTypes() {
        Assert.fail("doesnt support list of wrapper types yet");
    }

    @Test
    public void canHandleArray() {
        Assert.fail("doesnt support arrays yet");
    }






	
site docs (prior to release)
- migration tutorial
- doc how to change the PathResolver algorithm
- doc how to use PageResult directly
- doc how to configure log
- faq xxx doesnt work: activate log
- note on converter lookup (injection system)... note that it might change???
- component are annotated by @Stereotyped annotations: right now: Resource and vraptor2 component
- better than vraptor2:
	- method parameters: list of custom type supported
	- enum converter: private enums (usually only locally used) supported
- migration
	- Provider config
	- plugins not supported
	- converters without access to LogicRequest automatically supported through vraptor.xml
- calendar support: either birthday or birthday.time
- BigDecimal, BigInteger converter
- paranamer
- vraptor2 with paranamer by default
- vraptor2 without paranamer: how to
- vraptor2 default LogicParameterAnnotationWithParanamerFallback: how to migrate when not using paranamer and annotation
- migration tutorial on every documented topic of vraptor2
	- might find useful things to support
- containers now can be @Request, @Session, @App scoped

kung help
(MUST) - full spring support
(MUST) - Map support
(MUST) - forward problem with opening 2 connections to the database and 2 components... one or two? solve it?












right before release
	go through every request component and check if it really needs to be request based
	verify org.apache.log4j logs -> sl4j
	copyright in all files check
	- read ALL todos
	vraptor2 release with customized code
		the org.vraptor.Component annotation was modified
		vraptor2 bug found: HibernateLogicMethod: params with more than one dot does not work: modified
			HibernateLogicMethod
			RecursiveFieldValidation
			EntireFieldValidation
			its interface
		class ExpressionEvaluator
				throw new ExpressionEvaluationException("Invalid redirection using: " + redirection);
	jira
	forum
	official support by caelum

maybe
	better than vraptor2: support for inheritance
- Hibernate.validate(Object instance, String ... fields)
- Hibernate.validate(Object instance) : Proxy.getFirst(), Proxy.getSecond() will hibernate validate those fields






























ONLY AFTER RELEASE
(3.0.1) ceci: BigInteger converter (+test)... ja existe de BigDecimal (se bobear, ja existe no vraptor2)
(3.0.1): annotate all converters which do not depend on session or request as @AppScoped
(3.0.1)ceci: converters: jodatime (ver no vraptor2)
	- se o arquivo jodatime.jar estiver no classpath (use Class.forName com catch exception), loada automatico
	- se estiver no classpath, tem que adicionar os conversores atraves de reflection, nao pode referenciar nenhuma classe diretamente que referencia joda
(3.0.1)ceci: time converters (igual ao Date e ao Calendar, so que usa Time.SHORT, ou pattern hh:mm, ver no vraptor2...)
	- nao cadastra-los por padrao
(3.0.1)ceci: support generic Set with ognl (look at MiscOgnlSupportTest for generic list support - you need to create a SetAccessor)
(3.0.2) - xml output support
(3.0.1) ceci: 404 component
(3.0.1) MultiPartInterceptor config
- customizable error process on request execution
- each Provider should have a getComponentsToTest template method
- common-fileupload is mandatory, make it optional by only registering the interceptor if on the classpath
	- same thing with hibernate's validator plugin interceptor and vraptor2
- DDD related: ContainerBasedNullHandler support (non cached instances)
- better than vpraptor2: niceurl route caching	
- better tha vraptor2: faster niceurl parsing when matching
- RequestParameters implementation for POSTed xml and json values.
- MIRROR usage as a fallback for OGNL instantiation
- MIRROR usage everywhere
- reflection fallback system on nullhandler (automatic?)
- CachedConverters and others should neve register(Class), they should do it at startup and clone those pico instances if faster... check it!
- all converter erros messages should contain the original value between '' so its clear in the message if it was empty (or null)
- test that checks that the main PicoContainer is not registered... and the converters interface is also not registered so it doesnt give the same converter to two different requests
- check all TODOS and do something about them
- allow private/protected constructors (search for every newInstance with getConstructor and setAccessible them, work it out with pico/mirror and so on)
- allow private/protected getters/setters
- method addAsNext on InterceptorStack could have another name, could have been another interface (same implmementation)?
- accept do base interceptors are not being invoked
- guice support
- SortedMap support
- generic interface support: instantiates the implementation
- vraptor2 components with support for inherited outjection/injection
- vraptor2 logic with 2 names support
- Logger.isDebugEnabled
- result interface as wished
- MAKE CONVERTERS GLOBAL, NOT LOCAL?
- extract the Interface/Implementation part from ReflectionBasedNullHandler
	- extra tests for Colleciton/List/and so on instantiate algorithm
- v2: support extra extensions 
- v2: converters with access to request/session/context
- niceurls extra routes
- refactor ParametersInstantiator into MethodParameters constructor?
- vraptor forward config with request/forward/optional include
- v2: xml output
- refactor all interceptors from RequestExecution inside the DefaultInterceptorStack or InterceptorRegistry so it always load. 
	- this way, the Execution bla bla should always ask the accept method before proceeding
- MAKE CACHE WORKS
	support vraptor2 plugins if possible:
		- what else?
	- v2: lookup custom converter annotated field and complain?
- path annotation with support to dynamic logic and component lookup (niceurls?)
- custom converters for specified method parameters
- v2: support for session scoped components for constructor injection

OgnlGenericTypesSupportTest:
    @Test
    public void isCapableOfInstantiatingCustomTypesInAListSettingItsInternalValue() throws OgnlException {
        Ognl.setValue("legs[0].color", context, myCat, "red");
        assertThat(myCat.legs.get(0).color, is(equalTo("red")));
        mockery.assertIsSatisfied();
    }

OgnlParametersProviderTest:

    @Test
    public void removeFromTheCollectionIfAnElementIsCreatedWithinAListAndItsAttributesAreSetToExplicitelyToNull() throws SecurityException, NoSuchMethodException {
        final Method method = MyResource.class.getDeclaredMethod("buyA", House.class);
        final Matcher<ResourceMethod> resourceMethod = VRaptorMatchers.resourceMethod(method);
        mockery.checking(new Expectations() {
            {
                one(parameters).get("house.extraCats[1].id");
                will(returnValue(new String[] { "guilherme" }));
                one(parameters).get("house.extraCats[0].id");
                will(returnValue(new String[] { "" }));
                one(parameters).getNames();
                will(returnValue(new HashSet(Arrays.asList(new String[] { "house.extraCats[1].id",
                        "house.extraCats[0].id" }))));
                one(creator).typeFor(with(resourceMethod));
                will(returnValue(BuyASetter.class));
                one(nameProvider).parameterNamesFor(method);
                will(returnValue(new String[] { "House" }));
            }
        });
        Object[] params = provider.getParametersFor(mockery.methodFor(MyResource.class, "buyA", House.class));
        House house = (House) params[0];
        assertThat(house.extraCats, hasSize(1));
        assertThat(house.extraCats.get(0).id, is(equalTo("guilherme")));
        mockery.assertIsSatisfied();
    }


	optimizations (product):
	- cluster (v2, v3?)
	- converter optimization
	- connection leak
	- (optimization) static file lookup cache
	- (optimization) filter optimization
	- (support) lookup for common mistakes:
		- example: two components with the same name, same method name (same path)
	- deploy mode: complain about request unused args/ignore request unused args
	- support
	- extra vraptor2 compatibility procedures:
		- interceptor with restricted functionalities
		- plugins with restricted functionalities
		- custom lib
		- @In, @Out, @Read, @Parameter, @Logic(full support), @Component(full support)
		- v2: getters for value injection if vraptor2 component, using vraptor2 crazy introspectors, otherwise vraptor3
		- v2 paranamer support if vraptor2 component
		- v2: custom converters used on annotated fields
		- v2: migration without paranamer and annotation (defaultprovider)
		- v2: complain about parameter annotation on @Logic when not usingthe correct number of values (same as parameters)
	- vraptor2 code analysis product
		- migrator
	- (optimization) instantiate asm class only once
	- (optimization) dir lookup run only once (faster startup)
	- mistakes check removal: i.e. outjectioninterceptor ifs, assuming that the client code is just fine
	
	- totally new:
		- log visualization tool
		- log per user on log file (so you can keep track of who did what and debug an specific user)
		- stats ala hibernate stats
		
	- validate invalid parameter names in vraptor2 (duplicated names)
	- validate invalid parameter names in vraptor3 (duplicated names)
	- (optimization) empty lists should be cached and early returned
	- (optimization) cache EMPTY parameter class for method without parameters
	- (optimization) parameter name provider needs cache? maybe
	- (optimization) vraptor2 validation method lookup: remove the search
	- vrapro2 customization: log/error/pre-check on wrong validation method parameters or similar name (edid distance < 2)
	- vraptor2/3 customization: log/error/pre-check on most validations (faster/error prone/etc) - pre-analysis tool base
	- (optimization) global converters annotation/local converter annotation
	- statement product
	- graph product
	- ehcache
	- niceurl injection cache component
	- niceurl and common path two components for one url live detection (for  integration test or live)
	- niceurl cache (so the previous thing is not a problem)
	- (optimization) internal component cache limits (due to niceurl which might be huge)
	- log when trying to register a component with no interface 


done:
- support @Path
- ant build run tests
- cobertura report
- spring support
- invoke method
- support @Post, @...
- support Result with include
- vraptor info component
- 70% coverage
- support Result with custom views
- customizable strategies for JspView name (PathResolver)
- default strategy: resourceclass + resourcemethod
- sl4j usage
- interceptor support
- type converters
- ognl support
- vraptor2: @Component lookup
- validation support
- vraptor2: public method lookup (old algo)
- vraptor2: converter without request/session/context access support
	- v2: view interceptor
	- vraptor2 path resolver
	- vraptor2 component instantiation
	- vraptor2 interceptor instantiation
	- vraptor2 regex view manager support
	- vraptor2: pathresolver support on vraptor.xml based info
	- v2: support to validate method (improved: complain about method with wrong number of args)
	- v2: support for views.properties
	- method invocation without parameters
	- custom vraptor2 converters through custom Converters implementation
	- v2: instantiate with injection
	- v2: better clarifying messages on common mistakes (i.e. logic getter which receives a parameter)
	- v2: getters for outjection
	- v2: method invocation with parameters
	- v2: @Logic (parameters=...) support
	- v2: default Logic,Action and so on key removal
	- v2: constructor injection only
- hibernate validator
- converters
	primitive
	wrappers
	calendar
	date
	bigdecimal
	File
	enum
	primitive
- paranamer support
- Collection, List, Set, Calendar, SortedSet, Queue interface support
1 path annotation default value (without annotation)
2 path annotation with support to regex (niceurls?)
- interceptor sequence support
