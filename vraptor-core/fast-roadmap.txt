right now:

	ceci: BigInteger converter (+test)... ja existe de BigDecimal (se bobear, ja existe no vraptor2)
	ceci: converters: jodatime (ver no vraptor2)
		- se o arquivo jodatime.jar estiver no classpath (use Class.forName com catch exception), loada automatico
		- se estiver no classpath, tem que adicionar os conversores atraves de reflection, nao pode referenciar nenhuma classe diretamente que referencia joda
	ceci: time converters (igual ao Date e ao Calendar, so que usa Time.SHORT, ou pattern hh:mm, ver no vraptor2...)
		- nao cadastra-los por padrao


	4 v2: support v2 hibernate plugin -> CadastroAlunoLogic
		- testar sem o hibernate e ver se nao da classnotfound
		- confirmar mensagens do hibernate plugin estao vindo do arquivo certo
		
		
		
	3 v2: json output
	5 caelumweb -> v3 workforce
	
	- niceurls with programmatic support
	- niceurls -> path support
	- niceurls with file config support -> path support
	1 path annotation with support to value injection (niceurls?)
	- resolve interceptororder with interceptorstack
	2 test validator
	4 support Validator
	5 support HibernateValidator
	niceurls programatico e arquivo de config



	
	

	- v2: xml output

	13 converters: File
	15 concatenate convertion and validation errors
	support vraptor2 plugins if possible:
		- what else?
	17 customizable error process on request execution
	18 404 component
	20 hibernate plugin
	21 custom converters for specified method parameters
	22 setting errors during ognl expression evaluation should be defined as validation errors
	- default dir scanner misses unit tests
	23 json output support
	24 xml output support
	25 better exception handling everywhere
	- v2: lookup custom converter annotated field and complain?
- caelumweb use method FILL to app scope and request scope: adds to a list and adds on the run

- MAKE CACHE WORKS
- pico problem: STARTABLE/STOPABLE COMPONENTS with annotation + tests









	
site docs (prior to release)
- migration tutorial
- doc how to change the PathResolver algorithm
- doc how to use PageResult directly
- doc how to configure log
- faq xxx doesnt work: activate log
- note on converter lookup (injection system)... note that it might change???
- component are annotated by @Stereotyped annotations: right now: Resource and vraptor2 component
- better than vraptor2:
	- method parameters: list of custom type supported
	- enum converter: private enums (usually only locally used) supported
- migration
	- Provider config
	- plugins not supported
	- converters without access to LogicRequest automatically supported through vraptor.xml
- calendar support: either birthday or birthday.time
- BigDecimal, BigInteger converter
- paranamer
- vraptor2 with paranamer by default
- vraptor2 without paranamer: how to
- vraptor2 default LogicParameterAnnotationWithParanamerFallback: how to migrate when not using paranamer and annotation

kung help
- full spring support
- Array
- Map support
- forward problem with opening 2 connections to the database and 2 components... one or two? solve it?
- path annotation with support to dynamic logic and component lookup (niceurls?)














right before release
	verify org.apache.log4j logs -> sl4j
	copyright in all files check
	vraptor2 release with customized code
		the org.vraptor.Component annotation was modified
		vraptor2 bug found: HibernateLogicMethod: params with more than one dot does not work: modified
			HibernateLogicMethod
			RecursiveFieldValidation
			EntireFieldValidation
			its interface

maybe
	better than vraptor2: support for inheritance






























ONLY AFTER RELEASE
- DDD related: ContainerBasedNullHandler support (non cached instances)
- better than vpraptor2: niceurl route caching	
- better tha vraptor2: faster niceurl parsing when matching
- RequestParameters implementation for POSTed xml and json values.
- MIRROR usage as a fallback for OGNL instantiation
- MIRROR usage everywhere
- reflection fallback system on nullhandler (automatic?)
- CachedConverters and others should neve register(Class), they should do it at startup and clone those pico instances if faster... check it!
- all converter erros messages should contain the original value between '' so its clear in the message if it was empty (or null)
- test that checks that the main PicoContainer is not registered... and the converters interface is also not registered so it doesnt give the same converter to two different requests
- check all TODOS and do something about them
- allow private/protected constructors (search for every newInstance with getConstructor and setAccessible them, work it out with pico/mirror and so on)
- allow private/protected getters/setters
- method addAsNext on InterceptorStack could have another name, could have been another interface (same implmementation)?
- accept do base interceptors are not being invoked
- guice support
- SortedMap support
- generic interface support: instantiates the implementation
- vraptor2 components with support for inherited outjection/injection
- vraptor2 logic with 2 names support
- Logger.isDebugEnabled
- result interface as wished
- MAKE CONVERTERS GLOBAL, NOT LOCAL?
- extract the Interface/Implementation part from ReflectionBasedNullHandler
	- extra tests for Colleciton/List/and so on instantiate algorithm
- v2: support extra extensions 
- v2: converters with access to request/session/context
- niceurls extra routes

	optimizations (product):
	- converter optimization
	- connection leak
	- static file lookup cache
	- filter optimization
	- transaction/ddc optimization
	- lookup for other common mistakes
	- deploy mode: complain about unused args/ignore unused args
	- support
	- extra vraptor2 compatibility procedures:
		- interceptor with restricted functionalities
		- plugins with restricted functionalities
		- custom lib
	- vraptor2 code analysis product
	- instantiate asm class only once
	- @In, @Out, @Read, @Parameter, @Logic(full support), @Component(full support)
	- dir lookup run only once (faster startup)
	- mistakes check removal: i.e. outjectioninterceptor ifs, assuming that the client code is just fine
	- log visualization tool
	- log per user on log file (so you can keep track of who did what and debug an specific user)
	- v2: getters for value injection if vraptor2 component, using vraptor2 crazy introspectors, otherwise vraptor3
	- v2 paranamer support if vraptor2 component
	- validate invalid parameter names in vraptor2 (duplicated names)
	- validate invalid parameter names in vraptor3 (duplicated names)
	- empty lists should be cached and early returned
	- cache EMPTY parameter class for method without parameters
	- parameter name provider needs cache? maybe
	- be able to throw an exception if wrong parameters are passed
	- vraptor2 validation method lookup: remove the search
	- vrapro2 customization: log/error/pre-check on wrong validation method parameters or similar name (edid distance < 2)
	- vraptor2/3 customization: log/error/pre-check on most validations (faster/error prone/etc) - pre-analysis tool base
	- v2: custom converters used on annotated fields
	- global converters annotation/local converter annotation
	- stats ala hibernate stats
	- statement product
	- graph product
	- ehcache
	- v2: migration without paranamer and annotation (defaultprovider)
	- v2: complain about parameter annotation on @Logic when not usingthe correct number of values (same as parameters)
	- niceurl injection cache component
	- niceurl and common path two components for one url live detection (for  integration test or live)
	- niceurl cache (so the previous thing is not a problem)
	- internal component cache limits (due to niceurl which might be huge) 


done:
- support @Path
- ant build run tests
- cobertura report
- spring support
- invoke method
- support @Post, @...
- support Result with include
- vraptor info component
- 70% coverage
- support Result with custom views
- customizable strategies for JspView name (PathResolver)
- default strategy: resourceclass + resourcemethod
- sl4j usage
- interceptor support
- type converters
- ognl support
- vraptor2: @Component lookup
- primitive converters
- enum converter
- vraptor2: public method lookup (old algo)
- vraptor2: converter without request/session/context access support
	- v2: view interceptor
	- vraptor2 path resolver
	- vraptor2 component instantiation
	- vraptor2 interceptor instantiation
	- vraptor2 regex view manager support
	- vraptor2: pathresolver support on vraptor.xml based info
	- v2: support to validate method (improved: complain about method with wrong number of args)
	- v2: support for views.properties
	- method invocation without parameters
	- custom vraptor2 converters through custom Converters implementation
	- v2: instantiate with injection
	- v2: better clarifying messages on common mistakes (i.e. logic getter which receives a parameter)
	- v2: getters for outjection
	- v2: method invocation with parameters
	- v2: @Logic (parameters=...) support
	- v2: default Logic,Action and so on key removal
- converters
	primitive
	wrappers
	calendar
	date
	bigdecimal
- paranamer support
- Collection, List, Set, Calendar, SortedSet, Queue interface support
1 path annotation default value (without annotation)
2 path annotation with support to regex (niceurls?)
	