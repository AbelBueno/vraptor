[chapter Como fazer uma Lazy Session ou Lazy EntityManager]
**::por Tomaz Lavieri::**

[java]
/**
 * <b>JIT (Just-in-Time) {@link EntityManager} Creator</b> fábrica para o componente {@link EntityManager}
 * gerado de forma LAZY ou JIT(Just-in-Time) a partir de um {@link EntityManagerFactory}, que
 * normalmente se encontra em um ecopo de aplicativo @{@link ApplicationScoped}.
 * <br>
 * Um JIT {@link EntityManager} não é propriamente uma implementação real do {@link EntityManager}, mas 
 * transparece como sendo uma, o manager real só é realmente criada quando um método é invocado. Ao 
 * Receber um JIT {@link EntityManager} injetado uma sessão com o banco não será aberta até o momento 
 * que um dos seus métodos seja invocado.
 * <br>
 * Esta fábrica prove Enhanced {@link EntityManager} que só é aberto quando um de seus métodos for
 * executado, salvo quando o método é close() ou finalize(), estes dois métodos são tratados
 * de um maneira bem peculiar, conforme visto abaixo:<br>
 * <br>
 *  - Um JIT {@link EntityManager} ignora qualquer chamado ao método {@link EntityManager#close()},
 * o tempo de vida do JIT {@link EntityManager} é controlado por está fabrica, e seu fechamento
 * ocorrerá ao final de cada {@link RequestScoped}, culminando no fechamento do manager.<br>
 * <br>
 *  - Um JIT {@link EntityManager} ignora chamadas ao método {@link #finalize()} invocado pelo Garbage
 * Collector caso o {@link EntityManager} real não tenha sido chamada, ou seja, nenhum método foi
 * chamado previamente.<br>
 * <br>
 *  - Qualquer chamada a outro método do JIT {@link EntityManager} será tranferiada para o 
 * {@link EntityManager} real, caso o manager real ainda não tenha sido criado um manager é instantanemante
 * aberto.
 * 
 * @author Tomaz Lavieri
 * @since 1.0
 */
@Component
@RequestScoped
public class JITEntityManagerCreator implements ComponentFactory<EntityManager> {
	/**
	 * O método {@link EntityManager#close()} que é ignorado nas invocações do JIT {@link EntityManager}, pois esta é
	 * uma responsabilidade do {@link JITEntityManagerCreator} executada ao final do {@link RequestScoped}.
	 */
	private static final Method CLOSE = new Mirror().on(EntityManager.class).reflect().method("close").withoutArgs();

	/**
	 * O método {@link Object#finalize()} que deve ser ignorado caso o {@link EntityManager} real não tenha sido realmente criado.
	 */
	private static final Method FINALIZE = new Mirror().on(Object.class).reflect().method("finalize").withoutArgs();

	private EntityManager proxy;
	private EntityManager entityManager;

	private final EntityManagerFactory factory;
	private final Proxifier proxifier;

	public JITEntityManagerCreator(EntityManagerFactory factory, Proxifier proxifier) {
		this.factory = factory;
		this.proxifier = proxifier;
	}

	/**
	 * Cria um proxy que só vai criar um {@link EntityManager} apenas quando for chamado algum método
	 * que não seja close nem finalize
	 */
	@PostConstruct
	public void create() {
		this.proxy = proxifier.proxify(EntityManager.class, new MethodInvocation<EntityManager>() {
			@Override
			public Object intercept(EntityManager proxy, Method method, Object[] args, SuperMethod superMethod) {
				if (method.equals(CLOSE) || (method.equals(FINALIZE) && entityManager == null)) {
					return null; //skip
				}
				return new Mirror().on(getEntityManager()).invoke().method(method).withArgs(args);
			}
		});
	}

	/**
	 * Recupera o {@link EntityManager} real, criando um caso seja a primeira chamada a este método.
	 * @return
	 */
	public EntityManager getEntityManager() {
		if (entityManager == null) {
			entityManager = factory.createEntityManager();
		}
		return entityManager;
	}
	/**
	 * Recupera o proxy do EntityManager, para só criar um EntityManager de verdade quando ele for
	 * realmente necessário 
	 */
	@Override
	public EntityManager getInstance() {
		return proxy;
	}

	@PreDestroy
	public void destroy() {
		if (entityManager != null && entityManager.isOpen()) {
			entityManager.close();
		}
	}

}
[/java]

[java]

/**
 * <b>JIT (Just-in-Time) Hibernate {@link Session} Creator from {@link SessionFactory}</b>, fabrica para 
 * o componente {@link Session} gerado de forma lazy ou JIT (just-in-time) que é gerado a partir
 * de uma {@link SessionFactory} que normalmente se encontra em um ecopo de 
 * aplicativo @{@link ApplicationScoped}.<br>
 * <br>
 * Uma JIT {@link Session} não é propriamente uma sessão do Hibernate, mas transparece como sendo uma,
 * a {@link Session} real só é realmente criada quando um método é invocado. Receber uma 
 * JIT {@link Session} injetada não abrira a sessão com o hibernate até o momento que um dos seus
 * métodos seja invocado.<br>
 * <br>
 * Esta fábrica prove Enhanced {@link Session} que só é aberta quando um de seus métodos for
 * executado, salvo quando o método é close() ou finalize(), estes dois métodos são tratados
 * de um maneira bem peculiar, conforme visto abaixo:<br>
 * <br>
 *  - Uma JIT {@link Session} ignora qualquer chamado ao método {@link Session#close()}, o tempo de
 * vida da JIT {@link Session} é controlado por está fabrica, e seu fechamento ocorrerá ao final
 * de cada {@link RequestScoped}.<br>
 * <br>
 *  - Uma JIT {@link Session} ignora chamadas ao método {@link #finalize()} invocado pelo Garbage
 * Collector caso a {@link Session} real não tenha sido chamada, ou seja, nenhum método foi
 * chamado previamente.<br>
 * <br>
 *  - Qualquer chamada a outro método da JIT {@link Session} será tranferiada para a {@link Session}
 * real, caso a {@link Session} real ainda não tenha sido criada uma {@link Session} é instantanemante
 * aberta.
 * 
 * @author Tomaz Lavieri
 * @since 1.0
 */
@Component
@RequestScoped
public class JITSessionCreatorFromSessionFactory implements ComponentFactory<Session> {

	/**
	 * O método {@link Session#close()} que é ignorado nas invocações do JIT {@link Session}, pois esta é uma responsabilidade
	 * do {@link JITSessionCreatorFromSessionFactory} executada ao final do {@link RequestScoped}.
	 */
	private static final Method CLOSE = new Mirror().on(Session.class).reflect().method("close").withoutArgs();
	/**
	 * O método {@link Object#finalize()} que deve ser ignorado caso a {@link Session} real não tenha sido realmente criada.
	 */
	private static final Method FINALIZE = new Mirror().on(Object.class).reflect().method("finalize").withoutArgs();

	private Session proxy;
	private Session session;

	private final Proxifier proxifier;
	private final SessionFactory factory;

	public JITSessionCreatorFromSessionFactory(SessionFactory factory, Proxifier proxifier) {
		this.factory = factory;
		this.proxifier = proxifier;
	}

	/**
	 * Cria um proxy que só vai criar um {@link Session} apenas quando for chamado algum método
	 * que não seja close nem finalize
	 */
	@PostConstruct
	public void create() {
		this.proxy = proxifier.proxify(Session.class, new MethodInvocation<Session>() {
			@Override
			public Object intercept(Session proxy, Method method, Object[] args, SuperMethod superMethod) {
				if (method.equals(CLOSE) || (method.equals(FINALIZE) && session == null)) {
					return null; //skip
				}
				return new Mirror().on(getSession()).invoke().method(method).withArgs(args);
			}
		});
	}

	/**
	 * Recupera a {@link Session} real, criando uma caso seja a primeira chamada a este método.
	 * @return
	 */
	public Session getSession() {
		if (session == null) {
			session = factory.openSession();
		}
		return session;
	}

	/**
	 * Recupera o proxy da Session, para só criar um Session de verdade quando ele for
	 * realmente necessário 
	 */
	@Override
	public Session getInstance() {
		return proxy;
	}

	@PreDestroy
	public void destroy() {
		if (session != null && session.isOpen()) {
			session.close();
		}
	}

}
[/java]