[chapter Configura√ß√µes avancadas: sobrescrevendo as conven√ß√µes e comportamento do VRaptor]

[section Mudando a view renderizada por padr√£o]

Se voc√™ precisa mudar a view renderizada por padr√£o, ou mudar o local em que ela √© procurada,
basta criar a seguinte classe:

[java]
	@Component
	public class CustomPathResolver extends DefaultPathResolver {
		
		@Override
		protected String getPrefix() {
			return "/pasta/raiz/";
		}
		
		@Override
		protected String getExtension() {
			return "ftl"; // ou qualquer outra extens√£o
		}

		@Override
		protected String extractControllerFromName(String baseName) {
			return //sua convenÁ„o aqui
			       //ex.: Ao invÈs de redirecionar UserController para 'user'
			       //vocÍ quer redirecionar para 'userResource'
			       //ex.2: Se vocÍ sobrescreveu a conveÁ„o para nome dos Controllers para ***Resource
			       //e quer continuar redirecionando para 'user' e n„o para 'userResource'
		}

	}
[/java]

Se voc√™ precisa mudar mais ainda a conven√ß√£o basta implementar a interface PathResolver.

[section Mudando a URI padr√£o]

Por padr√£o, a URI para o m√©todo ClientesController.lista() √© /clientes/lista, ou seja,
nome_do_controller/nome_do_metodo. Para sobrescrever essa conven√ß√£o, basta criar a classe:
[java]
@Component
@ApplicationScoped
public class MeuRoutesParser extends PathAnnotationRoutesParser {
	//delegate constructor
	protected String extractControllerNameFrom(Class<?> type) {
		return //sua conven√ß√£o aqui
	}

 	protected String defaultUriFor(String controllerName, String methodName) {
		return //sua conven√ß√£o aqui
	}
}
[/java]

Se voc√™ precisa mudar mais ainda a conven√ß√£o basta implementar a interface RoutesParser.

[section Mudando o IoC provider]

O IoC provider padr√£o √© o spring. Para mud√°-lo basta colocar no web.xml:
<context-param>
    <param-name>br.com.caelum.vraptor.provider</param-name>
    <param-value>br.com.classe.do.seu.provider.Preferido</param-value>
</context-param>

Entre os padr√£o existem: br.com.caelum.vraptor.ioc.spring.SpringProvider e br.com.caelum.vraptor.ioc.pico.PicoProvider.
Voc√™ pode ainda estender alguma dessas duas classes e usar seu pr√≥prio provider.

[section Mudando ApplicationContext base do Spring]

Caso o VRaptor n√£o esteja usando o seu ApplicationContext como base, basta estender o SpringProvider
e implementar o m√©todo getParentApplicationContext, passando o ApplicationContext da sua aplica√ß√£o:

[java]
	package br.com.nomedaempresa.nomedoprojeto;
	public class CustomProvider extends SpringProvider {
		public ApplicationContext getParentApplicationContext(ServletContext context) {
			ApplicationContext applicationContext = //l√≥gica pra criar o applicationContext
			return applicationContext;
		}
	}
[/java]

e mudar o provider no web.xml:
[xml]
<context-param>
    <param-name>br.com.caelum.vraptor.provider</param-name>
    <param-value>br.com.nomedaempresa.nomedoprojeto.CustomProvider</param-value>
</context-param>
[/xml]

Por padr√£o o VRaptor tenta procurar o applicationContext via 
%%WebApplicationContextUtils.getWebApplicationContext(servletContext);%% ou carregando do applicationContext.xml
que est√° no classpath.

