[chapter Configurações avancadas: sobrescrevendo as convenções e comportamento do VRaptor]

[section Mudando a view renderizada por padrão]

Se você precisa mudar a view renderizada por padrão, ou mudar o local em que ela é procurada,
basta criar a seguinte classe:

[java]
	@Component
	public class CustomPathResolver extends DefaultPathResolver {
		
		@Override
		protected String getPrefix() {
			return "/pasta/raiz/";
		}
		
		@Override
		protected String getExtension() {
			return "ftl"; // ou qualquer outra extensão
		}
	}
[/java]

Se você precisa mudar mais ainda a convenção basta implementar a interface PathResolver.

[section Mudando o IoC provider]

O IoC provider padrão é o spring. Para mudá-lo basta colocar no web.xml:
<context-param>
    <param-name>br.com.caelum.vraptor.provider</param-name>
    <param-value>br.com.classe.do.seu.provider.Preferido</param-value>
</context-param>

Entre os padrão existem: br.com.caelum.vraptor.ioc.spring.SpringProvider e br.com.caelum.vraptor.ioc.pico.PicoProvider.
Você pode ainda estender alguma dessas duas classes e usar seu próprio provider.

[section Mudando ApplicationContext base do Spring]

Caso o VRaptor não esteja usando o seu ApplicationContext como base, basta implementar a interface:

[java]
	@Component
	@ApplicationScoped
	public class MySpringLocator implements SpringLocator {
	
		public ApplicationContext getApplicationContext(ServletContext context) {
			ApplicationContext applicationContext = //lógica pra criar o applicationContext
			return applicationContext;
		}
	}
[/java]

Por padrão o VRaptor tenta procurar o applicationContext via 
%%WebApplicationContextUtils.getWebApplicationContext(servletContext);%% ou carregando do applicationContext.xml
que está no classpath.

