[chapter Resource]
 
[section O que são Resources?]
Resources sao o que poderiamos pensar como recursos a serem disponibilizados para acesso pelos nossos clientes.

No caso de uma aplicacao web baseada no vraptor, um recurso deve ser anotado com a anotacao @Resource.
Assim que o programador insere tal anotacao em seu codigo, todos os metodos publicos desse recurso se tornam acessiveis atraves
de chamadas do tipo GET a uris especificas.

O exemplo a seguir mostra um recurso chamado ClienteController que possui metodos
para diversas funcionalidades ligadas a um cliente.

Simplesmente criando essa classe e os métodos faz com que as urls "/cliente/adiciona",
"/cliente/lista", "/cliente/visualiza", "/cliente/remove" e "/cliente/atualiza" sejam
disponibilizadas, cada uma invocando o respectivo método em sua classe.

[java]
@Resource
public class ClienteController {
 
  public void adiciona(Cliente cliente) {

  }
  
  public List<Cliente> lista() {
    return ...
  }
  
  public Cliente visualiza(Cliente perfil) {
    return ...
  }
 
  public void remove(Cliente cliente) {

  ...
  }
  

  public void atualiza(Cliente cliente) {
    ...
  }
  
}
[/java]

[section Escopos]

Por vezes você deseja compartilhar um componente entre todos os usuários,
entre todas as requisições de um mesmo usuário ou a cada requisição de um usuário.

Para definir em que escopo o seu componente vive, basta utilizar as anotações
@ApplicationScoped, @SessionScoped e @RequestScoped.

Caso nenhuma anotação seja utilizada, o VRaptor assume que seu componente ficará
no escopo de request, isto é, você terá um novo componente a cada nova requisição.
 
[section Http Methods]

O ideal é definir uma uri específica para diversos métodos http diferentes, como
GET, POST, PUT etc.

Para atingir esse objetivo, utilizamos as anotações @Get, @Post, @Delete etc juntamente
com a anotação @Path que permite configurar uma URI diferente da URI padrão.

O exemplo a seguir altera os padrões de URI do ClienteController para utilizar
duas uris distintas, com diversos métodos http:

[java]
@Resource
public class ClienteController {

  @Path("/cliente")
  @Post 
  public void adiciona(Cliente cliente) {
  }
  
  @Path("/")
  public List<Cliente> lista() {
    return ...
  }

  @Get
  @Path("/cliente")  
  public Cliente visualiza(Cliente cliente) {
    return ...
  }
 
  @Delete
  @Path("/cliente")
  public void remove(Cliente cliente) {
    ...
  }
  
  @Put
  @Path("/cliente")
  public void atualiza(Cliente cliente) {
    ...
  }
  
}
[/java]

Como você pode notar, utilizamos os métodos http + uma uri específica para
identificar cada um dos métodos de minha classe java.

No momento de criar os links e formulários html devemos tomar um cuidado **muito
importante** pois os browsers só dão suporte aos métodos ::POST:: e ::GET:: através de formulários hoje em dia.

Por isso, você deverâ criar as requisições para métodos do tipo ::DELETE::, ::PUT:: etc
através de javascript ou passando um parâmetro extra, chamado **_format**.

Esse parâmetro sobrescreverá o método http real sendo invocado.

O exemplo a seguir mostra um link para o método visualiza de cliente:

[xml]
<a href="/cliente?cliente.id=5">ver cliente 5</a>
[/xml]

Agora um exemplo de como invocar o método de adicionar um cliente:

[xml]
<form action="/cliente" method="post">
	<input name="cliente.nome" />
	<input type="submit" />
</form>
[/xml]

E, note que para permitir a remoção através do método ::DELETE::, temos que usar o 
parâmetro _format, uma vez que o browser não suporta ainda tais requisições:

[xml]
<form action="/cliente" method="post">
	<input name="_format" value="DELETE" type="hidden" />
	<input name="cliente.id" value="5" type="hidden" />
	<input type="remover cliente 5" />
</form>
[/xml]

[section @Path]
 
A anotação ::@Path:: permite que você customize as uris de acesso a seus métodos.
O uso básico dessa anotação é feito através de uma uri fixa. O exemplo a seguir mostra
a customização de uma uri para um método, que somente receberá requisições do tipo
::POST:: na uri **/cliente**:

[java]
@Resource
public class ClienteController {

  @Path("/cliente")
  @Post 
  public void adiciona(Cliente cliente) {
  }
    
}
[/java]

[title Path com injeção de variáveis]

Em diversos casos desejamos que a ::uri:: que identifica meu recurso tenha
como parte de seu valor, por exemplo, o identificador único de meu recurso.

Suponha o exemplo de um controle de clientes onde meu identificador único (chave
primária) é um número, podemos então mapear as uris ::/cliente/{cliente.id}::
para a visualização de cada cliente.

Isto é, se acessarmos a uri ::/cliente/2::, o método **visualiza** será invocado
e o parâmetro ::cliente.id:: será setado para **2**. Caso a uri ::/cliente/1717:: seja
acessada, o mesmo método será invocado com o valor **1717**.

Dessa maneira criamos uris únicas para identificar recursos diferentes do nosso sistema.
Veja o exemplo citado:

[java]
@Resource
public class ClienteController {

  @Get
  @Path("/cliente/{cliente.id}")  
  public Cliente visualiza(Cliente cliente) {
    return ...
  }
  
}
[/java]

Você pode ir além e setar diversos parâmetros através da uri:

[java]
@Resource
public class ClienteController {

  @Get
  @Path("/cliente/{cliente.id}/visualiza/{secao}")  
  public Cliente visualiza(Cliente cliente, String secao) {
    return ...
  }
  
}
[/java]

[title Paths com *]

Você também pode utilizar o * como método de seleção para a sua uri. O exemplo a
seguir ignora qualquer coisa após a palavra ::foto/:: :

[java]
@Resource
public class ClienteController {

  @Get
  @Path("/cliente/{cliente.id}/foto/*")  
  public File foto(Cliente cliente) {
    return ...
  }
  
}
[/java]

E agora o mesmo código, mas utilizado para baixar uma foto específica de um cliente:

[java]
@Resource
public class ClienteController {

  @Get
  @Path("/cliente/{cliente.id}/foto/{foto.id}")  
  public File foto(Cliente cliente, Foto foto) {
    return ...
  }
  
}
[/java]

Por vezes você deseja que o parâmetro a ser setado inclua também **/**s. Para isso
você deve utilizar o padrão {...*}:

[java]
@Resource
public class ClienteController {

  @Get
  @Path("/cliente/{cliente.id}/download/{path}")  
  public File download(Cliente cliente, String path) {
    return ...
  }
  
}
[/java]

[section RoutesConfiguration]

Por fim, a maneira mais avançada de configurar rotas de acesso aos seus recursos
é através de um **RoutesConfiguration**.

Esse componente deve ser configurado no escopo de aplicação e implementar o método config:

[java]
@ApplicationScoped
public class CustomRoutes implements RoutesConfiguration {

    public void config(Router router) {
    }

}
[/java]

De posse de um **Router**, você pode definir rotas para acesso a métodos e, o
melhor de tudo, é que a configuração é refactor-friendly, isto é, se você alterar
o nome de um método, a configuração também altera, mas mantem a mesma ::uri:: :

[java]
@ApplicationScoped
public class CustomRoutes implements RoutesConfiguration {

    public void config(Router router) {
        new Rules(router) {
            public void routes() {
                routeFor("/").is(ClienteController.class).list();
                routeFor("/cliente/random").is(ClienteController.class).aleatorio();
            }
        };
    }

}
[/java]

Por fim, você pode escolher o nome da classe e o nome do método em tempo de execução,
que permite criar rotas extremamente genéricas:

[java]
    routeFor("/{webResource}/facaAlgo/{webMethod}").is(type("br.com.caelum.nomedoprojeto.{webResource}"), method("{webMethod}"));
[/java]
