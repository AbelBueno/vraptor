[chapter Componentes]
 
[section O que são componentes?]
Componentes são instâncias de classes que seu projeto precisa para executar tarefas ou armazenar estados
em diferentes situações.

Exemplos clássicos de uso de componentes seriam os Daos, enviadores de email etc.

A sugestão de boa prática indica ::sempre:: criar uma interface para seus componentes.
Dessa maneira seu código também fica mais fácil de testar unitariamente.

O exemplo a seguir mostra um componente a ser gerenciado pelo vraptor:

[java]
@Component
public class ClienteDao {
 
  private final Session session;
  public ClienteDao(HibernateControl controle) {
  	this.session = controle.getSession()
  }
  
  public void adiciona(Cliente cliente) {
	session.save(cliente);
  }
  
}
[/java]

[section Escopos]

Assim como os recursos, os componentes vivem em um escopo específico e seguem
as mesmas regras, por padrão pertencendo ao escopo de requisicão, isto é, a cada
nova requisição seu componente será novamente instanciado.

O exemplo a seguir mostra o fornecedor de conexoes com o banco baseado no hibernate.
Esse fornecedor esta no escopo de aplicacação, portanto será instanciado somente
uma vez por contexto:

[java]
@ApplicationScoped
@Component
public class HibernateControl {
 
  private final SessionFactory factory;
  public HibernateControl() {
  	this.factory = new AnnotationConfiguration().configure().buildSessionFactory();
  }
  
  public Session getSession() {
  	return factory.openSession();
  }
  
}
[/java]

[section Injecao de dependencias]

O Vraptor utiliza um de seus provedores de injeção de dependências para controlar o que
é necessário para instanciar cada um de seus componentes e recursos.

Sendo assim, os dois exemplos anteriores permitem que qualquer um de seus recursos ou compeonenten receba
um ClienteDao em seu construtor, por exemplo:

[java]
@Resource
public class ClienteController {
	private final ClienteDao dao;
	
	public ClienteController(ClienteDao dao) {
		this.dao = dao;
	}

	@Post
	public void adiciona(Cliente cliente) {
		this.dao.adiciona(cliente);
	}
	
}
[/java]
