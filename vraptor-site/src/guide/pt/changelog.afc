[chapter ChangeLog]

[section 3.0.1 (a ser lançado)]
[list]
* paranamer atualizado para versão 1.5 (Atualize seu jar!)
* jars separados em opcional e obrigatório no vraptor-core
* dependências estão explicadas no vraptor-core/libs/mandatory/dependencies.txt e no 
  vraptor-core/libs/optional/dependencies.txt
* possibilidade de setar o character encoding da aplicação no web.xml através do context-param
	br.com.caelum.vraptor.encoding
* nova view: Referer view:
  result.use(Results.referer()).redirect();
* Escopo Flash:
  [java]
  result.include("umaChave", umObjeto);
  result.use(logic()).redirectTo(UmController.class).umMetodo();
  [/java]
  objetos incluidos no Result vão sobreviver até a próxima requisição quando acontecer um
  redirect.
* @Path suporta vários valores (String -> String[]) ex @Path({"/client", "/Client"})
  
[/list]
[section 3.0.0]
[list]
* ValidationError foi renomeado para ValidationException
* result.use(Results.http()) para setar headers e status codes do protocolo HTTP
* Correção de bugs
* documentação
* novo site
[/list]

[section 3.0.0-rc-1]
[list]
* aplicação de exemplo: mydvds
* novo jeito de adicionar os componentes opcionais do VRaptor:
[java]
public class CustomProvider extends SpringProvider {
	
	@Override
	protected void registerCustomComponents(ComponentRegistry registry) {
		registry.registry(ComponenteOpcional.class, ComponenteOpcional.class);
	}
}
[/java]

* Utils: HibernateTransactionInterceptor e JPATransactionInterceptor
* Um exemplo completo de aplicação na documentação.
* Docs em inglês
[/list]
[section 3.0.0-beta-5]
[list]
* Novo jeito de fazer validações:
  [java]
  	public void visualiza(Cliente cliente) {
  		validator.checking(new Validations() {{
  			that(cliente.getId() != null, "id", "id.deve.ser.preenchido");
  		}});
  		validator.onErrorUse(page()).of(ClientesController.class).list();
  		
  		//continua o metodo
  	}
  [/java]
* UploadedFile.getFile() agora retorna InputStream.
* EntityManagerCreator e EntityManagerFactoryCreator
* bugfixes

[/list]
[section 3.0.0-beta-4]
[list]
* Novo result: result.use(page()).of(MeuController.class).minhaLogica() renderiza a view
	padrão (/WEB-INF/jsp/meu/minhaLogica.jsp) sem executar a minhaLogica.
*	Classes Mocks para testes: MockResult e MockValidator, para facilitar testes unitários
	das lógicas. Eles ignoram a maioria das chamadas e guardam parâmetros incluídos no result
	e erros de validação.
*	As URIs passadas para result.use(page()).forward(uri) e result.use(page()).redirect(uri)
	não podem ser URIs de lógicas, usem os forwards e redirects do result.use(logic())
*	Os parâmetros passados para as URIs agora aceitam pattern-matching:
	[list]
	* Automático: se temos a URI /clients/{client.id} e client.id é um Long, o parâmetro {client.id} 
		só vai casar com números, ou seja, a URI /clients/42 casa, mas a uri /clients/random não casa.
		Isso funciona para todos os tipos numéricos, booleanos e enums, o vraptor vai restringir para
		os valores possíveis.
	* Manual: no CustomRoutes você vai poder fazer:
		routeFor("/clients/{client.id}").withParameter("client.id").matching("\\d{1,4}")
  			.is(ClienteController.class).mostra(null);
  	ou seja, pode restringir os valores para o determinado parâmetro via expressões regulares
  	no método matching.
  [/list]
* Converters para LocalDate e LocalTime do joda-time já vêm por padrão.
* Quando o Spring é usado como IoC Provider, o VRaptor tenta buscar o spring da aplicação para
	usar como container pai. A busca é feita por padrão em um dos dois jeitos:
	[list]
	* WebApplicationContextUtils.getWebApplicationContext(servletContext), para o caso em que você
		tem os listeners do Spring configurados.
	* applicationContext.xml dentro do classpath
	[/list]
	Se isso não for o suficiente você pode implementar a interface SpringLocator e disponbilizar
	o ApplicationContext do spring usado pela sua aplicação.
*	Utils:
	[list]
	* SessionCreator e SessionFactoryCreator para disponbilizar a Session e o SessionFactory do hibernate
		para os componentes registrados.
	* EncodingInterceptor, para mudar o encoding da sua aplicação.
	[/list]
* correção de vários bugs e melhorias na documentação.
[/list]
[section 3.0.0-beta-3]
[list]
* O Spring é o Provider de IoC padrão
* o applicationContext.xml no classpath é usado como configuração incial do spring, caso exista.
* a documentação http://vraptor.caelum.com.br/documentacao está mais completa e atualizada
* pequenos bugs e otimizações
[/list]
