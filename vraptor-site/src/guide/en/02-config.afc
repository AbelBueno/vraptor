[chapter Basic Configuration]

The necessary configurations for using VRaptor are minimal. The only required 
configurations are defining a filter and the application base package in your %%web.xml%%.
Here, we’ll also see some extra configurations, which are optional.

[section Your Resource]

Each resource in VRaptor consists of a class where you write your business logics. It is
made available for the user through a specific URI. After the logic execution, the user 
is redirected to a page that shows the process' final result.

You don’t need much effort to write a simple resource in VRaptor: just create a new class 
annotated with %%@Resource%%.

[java]
@Resource 
public class EmployeesController { 
 
    public List<Employee> listAll () { 
        return ... 
    } 
     
    public void add(Employee employee) { 
    } 
}
[/java]

In the above example, %%EmployeesController%% is a resource and the methods %%listAll%% 
and %%add%% are the logics.

[section Message bundle File]

Internationalization (i18n) is a powerful feature present in almost all Web frameworks 
nowadays. And it’s no different with VRaptor3. With i18n you can make your applications 
support several different languages (such as French, Portuguese, Spanish, English, etc) 
in a very easy way: simply translating the application messages.

In order to support i18n, you must create a file called %%messages.properties%% and make 
it available in your application classpath (%%WEB-INF/classes%%). That file contains 
lines which are a set of key/value entries, for example:

[code properties]
	field.userName = Username 
	field.password = Password
[/code]

So far, it’s easy, but what if you want to create files containing messages in other 
languages, for example, Portuguese? Also easy. You just need to create another properties 
file called %%messages_pt_BR.properties%%. Notice the suffix ::_pt_BR:: on the file name. 
It indicates that when the user access your application from his computer configured with 
Brazilian Portuguese locale, the messages in this file will be used. The file contents 
would be:

[code properties]
field.userName = Nome do Usuário
field.password = Senha
[/code]

Notice that the keys are the same in both files, what changes is the value to the specific 
language.

In order to use those messages in your JSP files, you could use JSTL. The code would go 
as follows:

[code]
<html> 
	<body> 
		<fmt:message key="field.userName" /> <input name="user.userName" /> 
         
		<br /> 
		
		<fmt:message key="field.password" /> <input type="password" name="user.password" /> 
		
		<input type="submit" /> 
	</body> 
</html>
[/code]

[section blank-project]
The minimal dependencies and configurations necessary for VRaptor to work are available 
in vraptor-blank-project, and can be downloaded at:

http://github.com/caelum/vraptor/downloads
