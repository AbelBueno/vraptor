[chapter Components]
 
[section What are components?]
Components are object instances that your application need to execute tasks or to
keep state in different situations.

DAOs and e-mail senders are classic component examples.

The best practices suggest you should ::always:: create interfaces for your components to implement.
This makes your code much easier to unit test.

The following example shows a VRaptor-managed component:

[java]
@Component
public class ClientDao {
 
  private final Session session;
  public ClientDao(HibernateControl control) {
  	this.session = control.getSession()
  }
  
  public void add(Client client) {
	session.save(client);
  }
  
}
[/java]

[section Scopes]

Just like resources, components live in specific scopes and follow the same rules.
The default scope for a component is the request scope, meaning that a new instance
will be created for each request.

The following example shows a Hibernate-based connection provider.
The application scope is specified for the provider, so only one instance 
per application context will be created:

[java]
@ApplicationScoped
@Component
public class HibernateControl {
 
  private final SessionFactory factory;
  public HibernateControl() {
  	this.factory = new AnnotationConfiguration().configure().buildSessionFactory();
  }
  
  public Session getSession() {
  	return factory.openSession();
  }
  
}
[/java]

[section Dependency injection]

VRaptor uses one of its own dependency injection providers to control what it needs 
in order to create new instances of your components and resources.

For that reason, the former two examples allow any of your resources or components to
receive a ClientDao in its constructor. For example:

[java]
@Resource
public class ClientController {
	private final ClientDao dao;
	
	public ClientController(ClientDao dao) {
		this.dao = dao;
	}

	@Post
	public void add(Client client) {
		this.dao.add(client);
	}
	
}
[/java]
