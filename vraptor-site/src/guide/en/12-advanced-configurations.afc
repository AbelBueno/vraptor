[chapter Advanced configurations: overriding VRaptor's behavior and conventions]

[section Changing the default rendered view]

If you need to change the default rendered view, or change the place where it'll be look for,
you'll only need to create the following class:

[java]
	@Component
	public class CustomPathResolver extends DefaultPathResolver {
		
		@Override
		protected String getPrefix() {
			return "/root/directory/";
		}
		
		@Override
		protected String getExtension() {
			return "ftl"; // or any other extension
		}

		@Override
		protected String extractControllerFromName(String baseName) {
			return //your convention here
			       //ex.: If you want to redirect UserController to 'userResource' instead of 'user'
			       //ex.2: If you override the convention for Controllers name to ***Resource
			//and still want to redirect to 'user' and not to 'userResource'
		}
	}
[/java]

If you need a more complex convention, just implement the PathResolver interface.

[section Mudando a URI padr√£o]

The default URI for ClientsController.list() is /clients/list, i.e, controller_name/method_name.
If you want to override this convention, you can create a class like:
[java]
@Component
@ApplicationScoped
public class MyRoutesParser extends PathAnnotationRoutesParser {
	//delegate constructor
	protected String extractControllerNameFrom(Class<?> type) {
		return //your convention here
	}

 	protected String defaultUriFor(String controllerName, String methodName) {
		return //your convention here
	}
}
[/java]

If you need a more complex convention, just implement the RoutesParser interface.

[section Changing IoC provider]

VRaptor's default IoC provider is Spring. In order to change, just add the following to your
web.xml:
<context-param>
    <param-name>br.com.caelum.vraptor.provider</param-name>
    <param-value>com.package.from.your.PrefferedProviderClass</param-value>
</context-param>

VRaptor comes with built-in support to both Spring (br.com.caelum.vraptor.ioc.spring.SpringProvider) and PicoContainer
(br.com.caelum.vraptor.ioc.pico.PicoProvider).
You still have the option to extend any of these classes and use your own provider.

[section Changing Spring's base ApplicationContext]

If VRaptor isn't using your ApplicationContext as base, just extend SpringProvider and implement the
getParentApplicationContext method, giving it your application's ApplicationContext:

[java]
	package br.com.apackage.aproject;
	public class CustomProvider extends SpringProvider {
		public ApplicationContext getParentApplicationContext(ServletContext context) {
			ApplicationContext applicationContext = //your own logic to create your applicationContext
			return applicationContext;
		}
	}
[/java]

and change the provider at your web.xml:
[xml]
<context-param>
    <param-name>br.com.caelum.vraptor.provider</param-name>
    <param-value>br.com.apackage.aproject.CustomProvider</param-value>
</context-param>
[/xml]

By default, VRaptor try to find the applicationContext via
%%WebApplicationContextUtils.getWebApplicationContext(servletContext);%% or loading the applicationContext.xml
that is on your classpath.
