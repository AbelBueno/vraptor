[chapter Configuração básica]
Como em qualquer framework web, precisamos fazer algumas configurações para que o controlador funcione corretamente.
Uma das grandes vantagens do VRaptor2 e que foi mantida nessa nova versão é o baixo número de configurações necessárias. Na verdade,
a única configuração obrigatória que você vai fazer é adicionar um filtro no web.xml

[section web.xml]

No web.xml precisamos liberar o filtro do VRaptor3, para isso, basta adicionarmos as seguintes linhas no arquivo:

[code]
<!-- declaracao do filtro -->
<filter>
	<filter-name>vraptor</filter-name>
	<filter-class>br.com.caelum.vraptor.VRaptor</filter-class>
</filter>

<!-- mapeando o filtro para todas as requisicoes -->
<filter-mapping>
	<filter-name>vraptor</filter-name>
	<url-pattern>/*</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>
[/code]

Essa configuração do filtro do VRaptor fará com que todas as requisições que chegarem para sua aplicação sejam interpretadas pelo próprio VRaptor,
e dessa forma, ele poderá decidir para qual recurso o fluxo da sua aplicação será direcionado. E consequentemente, executando as lógicas de 
negócio que você definiu em sua aplicação. 

[section Seu recurso]

Cada recurso no VRaptor3 funciona como uma classe na qual você escreve suas lógicas de negócio e que ficam acessíveis para o usuário a partir de
uma determinada URI. Ao final da execução de cada lógica do seu recurso, usuário é enviado para uma página que exibe o resultado final do processo.

Para escrever um recurso simples no VRaptor3, nós não precisamos de muito esforço, basta criarmos uma classe e anotarmos essa classe com a anotação
::@Resource::

[code]
@Resource
public class FuncionarioController {

	public List<Funcionario> listaTodos() {
		return ...
	}
	
	public void adiciona(Funcionario funcionario) {
	}
}
[/code]

[section Arquivo de mensagens]

[section WEB-INF/lib]

[section blank-project]

temos que ter um blank-project que e' so descompactar