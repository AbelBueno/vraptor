[chapter Resource]
 
[section O que são Resources?]
Resources sao o que poderiamos pensar como recursos a serem disponibilizados para acesso pelos nossos clientes.

No caso de uma aplicacao web baseada no vraptor, um recurso deve ser anotado com a anotacao @Resource.
Assim que o programador insere tal anotacao em seu codigo, todos os metodos publicos desse recurso se tornam acessiveis atraves
de chamadas do tipo GET a uris especificas.

O exemplo a seguir mostra um recurso chamado ClienteController que possui metodos
para diversas funcionalidades ligadas a um cliente.

Simplesmente criando essa classe e os métodos faz com que as urls "/cliente/adiciona",
"/cliente/lista", "/cliente/visualiza", "/cliente/remove" e "/cliente/atualiza" sejam
disponibilizadas, cada uma invocando o respectivo método em sua classe.

[code]
@Resource
public class ClienteController {
 
  public void adiciona(Cliente cliente) {

  }
  
  public List<Cliente> lista() {
    return ...
  }
  
  public Cliente visualiza(Cliente perfil) {
    return ...
  }
 
  public void remove(Cliente cliente) {

  ...
  }
  

  public void atualiza(Cliente cliente) {
    ...
  }
  
}
[/code]

[section Escopos]

Por vezes você deseja compartilhar um componente entre todos os usuários,
entre todas as requisições de um mesmo usuário ou a cada requisição de um usuário.

Para definir em que escopo o seu componente vive, basta utilizar as anotações
@ApplicationScoped, @SessionScoped e @RequestScoped.

Caso nenhuma anotação seja utilizada, o VRaptor assume que seu componente ficará
no escopo de request, isto é, você terá um novo componente a cada nova requisição.
 
[section Http Methods]

O ideal é definir uma uri específica para diversos métodos http diferentes, como
GET, POST, PUT etc.

Para atingir esse objetivo, utilizamos as anotações @Get, @Post, @Delete etc juntamente
com a anotação @Path que permite configurar uma URI diferente da URI padrão.

O exemplo a seguir altera os padrões de URI do ClienteController para utilizar
duas uris distintas, com diversos métodos http:

[code]
@Resource
public class ClienteController {

  @Path("/cliente")
  @Post 
  public void adiciona(Cliente cliente) {
  }
  
  @Path("/")
  public List<Cliente> lista() {
    return ...
  }

  @Get
  @Path("/cliente")  
  public Cliente visualiza(Cliente perfil) {
    return ...
  }
 
  @Delete
  @Path("/cliente")
  public void remove(Cliente cliente) {
    ...
  }
  
  @Put
  @Path("/cliente")
  public void atualiza(Cliente cliente) {
    ...
  }
  
}
[/code]

Como você pode notar, utilizamos os métodos http + uma uri específica para
identificar cada um dos métodos de minha classe java.

No momento de criar os links e formulários html devemos tomar um cuidado <muito
importante> pois os browsers só dão suporte aos métodos POST e GET através de formulários hoje em dia.

Por isso, você deverâ criar as requisições para métodos do tipo DELETE, PUT etc
através de javascript ou passando um parâmetro extra, chamado <_format>.

Esse parâmetro sobrescreverá o método http real sendo invocado.

O exemplo a seguir mostra um link para o método visualiza de cliente:

[code]
<a href="/cliente?cliente.id=5">ver cliente 5</a>
[/code]

Agora um exemplo de como invocar o método de adicionar um cliente:

[code]
<form action="/cliente" method="post">
	<input name="cliente.nome" />
	<input type="submit" />
</form>
[/code]

E, note que para permitir a remoção através do método DELETE, temos que usar o 
parâmetro _format, uma vez que o browser não suporta ainda tais requisições:

[code]
<form action="/cliente" method="post">
	<input name="_format" value="DELETE" type="hidden" />
	<input name="cliente.id" value="5" type="hidden" />
	<input type="remover cliente 5" />
</form>
[/code]

[section @Path]
 
[section @Component]

 
comentar da similaridade dos @Component com escopo com o jsf
 
[section Provider]
 
[section Exemplos]
 
Exemplos de uso de todos os casos aqui com codigo

